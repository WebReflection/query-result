{"name":"Query-result","tagline":"Rethinking the $","body":"QueryResult, rethinking the `$()`\r\n=================================\r\n\r\n[![build status](https://secure.travis-ci.org/WebReflection/query-result.png)](http://travis-ci.org/WebReflection/query-result)\r\n\r\n### What is QueryResult?\r\nWe all would like to simplify what is the most common operation when dealing with any document: elements selection through CSS queries.\r\n\r\nWe also would like to have the ability to attach or remove listeners without writing\r\nverbose names such `addEventListener` when `on` would work just fine.\r\n\r\nFinally, we'd like to be able to dispatch Events with the ability to pass arbitrary data,\r\nlike it's already possible via `CustomEvent` constructor.\r\n\r\nInstead of using some limited, quite obtrusive, and not fully cross platform code like\r\n[the following one](https://gist.github.com/paulirish/12fb951a8b893a454b32) proposed by Paul Irish, we can use a much better approach, we can subclass Array for real.\r\n\r\nNot only this is a technique that will be incrementally available as soon\r\nas browsers will bring ES6 features in their engines, it also gives us the ability\r\nto extend such subclass the way we want without modifying global properties and objects,\r\nkeeping the environment clean and friendly.\r\n\r\nWith `QueryResult` we have backward compatibility down to older IE,\r\nthe core ability to add, remove, and dispatch events,\r\nplus an easy way to extend the prototype, with the ability to work\r\nwith the resulting collection as a regular `Array` without losing the subclass.\r\n\r\n```js\r\n$('input[required]')\r\n  // regular Array methods available\r\n  .filter(function (el) {\r\n    return !el.value.trim();\r\n  })\r\n  // add a specific class to the filtered list\r\n  .map(function (el) {\r\n    el.classList.add('please-fill-me');\r\n  })\r\n  // still on an instance of QueryResult\r\n  // so we could add a listener to each element\r\n  .on('focus', function (el) {\r\n    el.classList.remove('please-fill-me');\r\n  })\r\n  // with chainability included\r\n  .on('blur', function (el) {\r\n    if (!el.value.trim()) {\r\n      el.classList.add('please-fill-me');\r\n    }\r\n  })\r\n;\r\n```\r\n\r\n### Features\r\nThe first basic improvements over most alternative, is the usage of [**query** and **queryAll**](http://www.w3.org/TR/2015/WD-dom-20150428/#elements) methods to query relatively from an element, whenever these are available.\r\n\r\nThis avoids surprises with selectors that could match elements outside the one we are searching in.\r\n\r\n```js\r\n// common alternatives\r\n// will return every p\r\n// even if not inside the node\r\n$('body p', node)\r\n\r\n// QuerySelector won't find anything\r\n$('body p', node)\r\n```\r\nIf you are not sure if your target browsers will support such functionality,\r\nyou can always include this little [dom4 polyfill]([dom4 polyfill](https://github.com/WebReflection/dom4#dom4)).\r\n\r\n\r\n\r\n#### :first\r\nIf a string contains the pseudo selector `:first` at its end,\r\nthe result will stop at the very first encountered match.\r\n\r\nThis is the only non standard pseudo-selector implemented.\r\n```js\r\n// will return only first matched p\r\n// and the first matched span\r\n$('p:first, span:first')\r\n```\r\nThis is specially handy in term of performance since \r\nthe browser will actually stop searching instead of analyzing\r\nthe entire document as it would do via `queryAll` or `querySelectorAll`.\r\n\r\n### API\r\nEvery available Array method is provided by `$.prototype`, and every method\r\nthat would usually return a new Array will return a new QueryResult instead.\r\n\r\nBeside that, these are the only 4 core methods:\r\n\r\n  * `.on(type, handler[, capture])` that will invoke `addEventListener` per each element\r\n  * `.off(type, handler[, capture])` that will invoke `removeEventListener` per each element\r\n  * `.dispatch(type[, initDictionary])` that will shortcut `CustomEvent` initialization and dispatch it per each node\r\n  * public static `$.extend(name, methodOrDescriptor)` that will augment `$.prototype` using either a method or an ES5 like descriptor to provide the ability to set default properties, as well as getters and setters\r\n\r\n\r\nFollowing some example on how to use such API\r\n```js\r\n// add a listener\r\n$('a:first').on('click', function(e) {\r\n  e.preventDefault();\r\n  alert(e.detail);\r\n});\r\n\r\n// dispatch an event\r\n$('a:first').dispatch(\r\n  'click',\r\n  // optional CustomEvent dictionary\r\n  {detail: 'Hello there!'}\r\n);\r\n\r\n// using Array methods\r\nvar newCollection = $('.new-nodes')\r\n      .concat(previousCollection)\r\n      .filter(because)\r\n      .on('custom:event', react);\r\n\r\n\r\n// extending via method\r\n$.extend('html', function (html) {\r\n  var el = (this[0] || {});\r\n  if (html) el.innerHTML = html;\r\n  else return el.innerHTML;\r\n});\r\n\r\n\r\n// extending via descriptor\r\n$.extend('html', {\r\n  get: function () {\r\n    return this[0] && this[0].innerHTML;\r\n  },\r\n  set: function (html) {\r\n    if (this.length) {\r\n      this[0].innerHTML = html;\r\n    }\r\n  }\r\n});\r\n\r\n```\r\n\r\n\r\n\r\n### Compatibility\r\nYou can verify by your own through [this page](http://webreflection.github.io/query-result/test/) or trust me it's going to work in these browsers:\r\n\r\n#### Desktop\r\n\r\n  * IE 6 or greater\r\n  * Firefox 3 or greater\r\n  * Chrome\r\n  * Safari\r\n  * Opera\r\n\r\n\r\n#### Mobile\r\n\r\n  * Android 2 or greater\r\n  * iOS 5 or greater\r\n  * UC Browser and UC Mini\r\n  * IE9 Mobile or greater\r\n  * Opera Mini and Mobile\r\n  * Blackberry OS 7 and OS 10\r\n  * Kindle Fire\r\n  * Ubuntu Phone\r\n  * Bada\r\n  * Xpress\r\n  * webOS\r\n\r\nPlease note that using polyfill like [dom4 polyfill](https://github.com/WebReflection/dom4#dom4) could increase compatibility and reliability of this library.\r\n\r\n\r\n\r\n### How to include\r\nThis little script is available via [require](https://github.com/WebReflection/query-result/blob/master/build/query-result.node.js), [AMD](https://github.com/WebReflection/query-result/blob/master/build/query-result.amd.js), or just [plain JS](https://github.com/WebReflection/query-result/blob/master/build/query-result.js) on the global scope.\r\n\r\nIt is also [available via CDNJS](https://cdnjs.cloudflare.com/ajax/libs/query-result/0.1.3/query-result.js)\r\n\r\nAlternatively, you can use as bootstrap template the [base.html](https://github.com/WebReflection/query-result/blob/master/base.html) page which would\r\nupgrade both JS and DOM environment to the latest standards.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}